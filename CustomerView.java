import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class CustomerView {
    private final Scanner scanner;
    private final List<MenuItem> menuItems;
    private final List<Table> tables;
    private final List<Customer> customers;
    private final List<Order> orders;
    private Customer currentCustomer;
    private Order currentOrder;
    private int nextOrderId = 1;
    private int nextCustomerId = 1;

    public CustomerView() {
        this.scanner = new Scanner(System.in);
        this.menuItems = new ArrayList<>();
        this.tables = new ArrayList<>();
        this.customers = new ArrayList<>();
        this.orders = new ArrayList<>();
        initializeData();
    }

    public void start() {
        System.out.println("\n=== CH√ÄO M·ª™NG ƒê·∫æN QU√ÅN C√Ä PH√ä ===");
        
        while (true) {
            System.out.println("\n=== MENU KH√ÅCH H√ÄNG ===");
            System.out.println("1. Xem th·ª±c ƒë∆°n");
            System.out.println("2. ƒê·∫∑t h√†ng");
            System.out.println("3. Xem gi·ªè h√†ng");
            System.out.println("4. Thanh to√°n");
            System.out.println("5. ƒêƒÉng k√Ω kh√°ch h√†ng");
            System.out.println("6. ƒêƒÉng nh·∫≠p");
            System.out.println("7. Xem l·ªãch s·ª≠ ƒë∆°n h√†ng");
            System.out.println("8. Tho√°t");
            System.out.print("Ch·ªçn t√πy ch·ªçn (1-8): ");

            int choice = getIntInput();

            switch (choice) {
                case 1 -> viewMenu();
                case 2 -> placeOrder();
                case 3 -> viewCart();
                case 4 -> checkout();
                case 5 -> registerCustomer();
                case 6 -> loginCustomer();
                case 7 -> viewOrderHistory();
                case 8 -> {
                    System.out.println("C·∫£m ∆°n b·∫°n ƒë√£ gh√© thƒÉm! T·∫°m bi·ªát! üëã");
                    return;
                }
                default -> System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }

    private void viewMenu() {
        if (menuItems.isEmpty()) {
            System.out.println("\n‚ö†Ô∏è Th·ª±c ƒë∆°n hi·ªán ƒëang tr·ªëng.");
            return;
        }

        System.out.println("\n=== TH·ª∞C ƒê∆†N ===");
        System.out.printf("%-5s %-25s %-15s %-10s %-40s%n",
                "ID", "T√™n m√≥n", "Lo·∫°i", "Gi√° (VNƒê)", "M√¥ t·∫£");
        System.out.println("-".repeat(100));

        for (MenuItem item : menuItems) {
            long price = Math.round(item.calculatePrice());
            System.out.printf("%-5d %-25s %-15s %-10d %-40s%n",
                    item.getId(),
                    item.getName(),
                    item.getCategory(),
                    price,
                    item.getDescription());
        }
    }

    private void placeOrder() {
        if (currentOrder == null) {
            System.out.println("\n=== T·∫†O ƒê∆†N H√ÄNG M·ªöI ===");
            System.out.println("1. Dine-in (ƒÇn t·∫°i qu√°n)");
            System.out.println("2. Takeaway (Mang v·ªÅ)");
            System.out.print("Ch·ªçn lo·∫°i d·ªãch v·ª• (1-2): ");

            int serviceChoice = getIntInput();
            Order.ServiceType serviceType = (serviceChoice == 1) ? 
                Order.ServiceType.DINE_IN : Order.ServiceType.TAKEAWAY;

            currentOrder = new Order(nextOrderId++, 
                currentCustomer != null ? currentCustomer.getCustomerId() : 0, 
                serviceType);

            if (serviceType == Order.ServiceType.DINE_IN) {
                assignTable();
            }
        }

        viewMenu();
        System.out.print("\nNh·∫≠p ID m√≥n mu·ªën ƒë·∫∑t: ");
        int itemId = getIntInput();

        MenuItem selectedItem = findMenuItemById(itemId);
        if (selectedItem == null) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y m√≥n c√≥ ID n√†y.");
            return;
        }

        System.out.print("Nh·∫≠p s·ªë l∆∞·ª£ng: ");
        int quantity = getIntInput();

        if (quantity <= 0) {
            System.out.println("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.");
            return;
        }

        currentOrder.addItem(selectedItem, quantity);
        System.out.println("‚úÖ ƒê√£ th√™m " + selectedItem.getName() + " x" + quantity + " v√†o gi·ªè h√†ng!");
    }

    private void assignTable() {
        List<Table> availableTables = tables.stream()
                .filter(t -> t.getStatus() == Table.TableStatus.AVAILABLE)
                .toList();

        if (availableTables.isEmpty()) {
            System.out.println("‚ö†Ô∏è Hi·ªán t·∫°i kh√¥ng c√≥ b√†n tr·ªëng. Vui l√≤ng ch·ªù ho·∫∑c ch·ªçn Takeaway.");
            return;
        }

        System.out.println("\n=== B√ÄN TR·ªêNG ===");
        System.out.printf("%-8s %-10s%n", "S·ªë b√†n", "S·ª©c ch·ª©a");
        System.out.println("-".repeat(20));

        for (Table table : availableTables) {
            System.out.printf("%-8d %-10d%n", table.getTableNumber(), table.getCapacity());
        }

        System.out.print("Ch·ªçn s·ªë b√†n: ");
        int tableNumber = getIntInput();

        Table selectedTable = findTableByNumber(tableNumber);
        if (selectedTable != null && selectedTable.getStatus() == Table.TableStatus.AVAILABLE) {
            selectedTable.occupyTable(currentCustomer != null ? currentCustomer.getCustomerId() : 0);
            currentOrder.setTableNumber(tableNumber);
            System.out.println("‚úÖ ƒê√£ ƒë·∫∑t b√†n s·ªë " + tableNumber);
        } else {
            System.out.println("‚ùå B√†n kh√¥ng kh·∫£ d·ª•ng.");
        }
    }

    private void viewCart() {
        if (currentOrder == null || currentOrder.isEmpty()) {
            System.out.println("\nüõí Gi·ªè h√†ng tr·ªëng.");
            return;
        }

        System.out.println("\n=== GI·ªé H√ÄNG ===");
        System.out.println(currentOrder.toString());
    }

    private void checkout() {
        if (currentOrder == null || currentOrder.isEmpty()) {
            System.out.println("\nüõí Gi·ªè h√†ng tr·ªëng. Kh√¥ng th·ªÉ thanh to√°n.");
            return;
        }

        System.out.println("\n=== THANH TO√ÅN ===");
        System.out.println(currentOrder.toString());

        System.out.print("\nX√°c nh·∫≠n thanh to√°n? (y/n): ");
        String confirm = scanner.nextLine().trim().toLowerCase();

        if (confirm.equals("y") || confirm.equals("yes")) {
            currentOrder.setStatus(Order.OrderStatus.CONFIRMED);
            orders.add(currentOrder);

            if (currentCustomer != null) {
                currentCustomer.addOrder(currentOrder);
            }

            System.out.println("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!");
            System.out.println("M√£ ƒë∆°n h√†ng: #" + currentOrder.getOrderId());
            System.out.println("C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng! üôè");

            currentOrder = null;
        } else {
            System.out.println("ƒê√£ h·ªßy thanh to√°n.");
        }
    }

    private void registerCustomer() {
        System.out.println("\n=== ƒêƒÇNG K√ù KH√ÅCH H√ÄNG ===");
        
        System.out.print("Nh·∫≠p t√™n: ");
        String name = scanner.nextLine().trim();
        
        System.out.print("Nh·∫≠p email: ");
        String email = scanner.nextLine().trim();
        
        System.out.print("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i: ");
        String phone = scanner.nextLine().trim();

        Customer newCustomer = new Customer(nextCustomerId++, name, email, phone);
        customers.add(newCustomer);
        currentCustomer = newCustomer;

        System.out.println("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! Ch√†o m·ª´ng " + name + "!");
    }

    private void loginCustomer() {
        System.out.println("\n=== ƒêƒÇNG NH·∫¨P ===");
        
        System.out.print("Nh·∫≠p email: ");
        String email = scanner.nextLine().trim();
        
        System.out.print("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i: ");
        String phone = scanner.nextLine().trim();

        Customer foundCustomer = customers.stream()
                .filter(c -> c.getEmail().equals(email) && c.getPhoneNumber().equals(phone))
                .findFirst()
                .orElse(null);

        if (foundCustomer != null) {
            currentCustomer = foundCustomer;
            System.out.println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o m·ª´ng " + foundCustomer.getName() + "!");
        } else {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n. Vui l√≤ng ƒëƒÉng k√Ω tr∆∞·ªõc.");
        }
    }

    private void viewOrderHistory() {
        if (currentCustomer == null) {
            System.out.println("\n‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªãch s·ª≠ ƒë∆°n h√†ng.");
            return;
        }

        List<Order> customerOrders = orders.stream()
                .filter(o -> o.getCustomerId() == currentCustomer.getCustomerId())
                .toList();

        if (customerOrders.isEmpty()) {
            System.out.println("\nüìã B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.");
            return;
        }

        System.out.println("\n=== L·ªäCH S·ª¨ ƒê∆†N H√ÄNG ===");
        for (Order order : customerOrders) {
            System.out.println(order.toString());
            System.out.println("-".repeat(50));
        }
    }

    private void initializeData() {
        // Initialize sample menu items
        menuItems.add(new Coffee(1, "C√† ph√™ ƒëen", 25000, "Coffee", "C√† ph√™ ƒëen truy·ªÅn th·ªëng"));
        menuItems.add(new Coffee(2, "C√† ph√™ s·ªØa", 30000, "Coffee", "C√† ph√™ s·ªØa ƒë·∫∑c bi·ªát"));
        menuItems.add(new Coffee(3, "Cappuccino", 45000, "Coffee", "Cappuccino √ù"));
        menuItems.add(new Coffee(4, "Latte", 50000, "Coffee", "Latte th∆°m ngon"));
        
        MenuItem sandwich = new MenuItem(5, "B√°nh m√¨ th·ªãt", "B√°nh m√¨ th·ªãt n∆∞·ªõng", 35000, "Food") {
            @Override
            public String getItemType() { return "Food"; }
            @Override
            public double calculatePrice() { return getBasePrice(); }
        };
        menuItems.add(sandwich);

        MenuItem cake = new MenuItem(6, "B√°nh ng·ªçt", "B√°nh ng·ªçt t∆∞∆°i", 25000, "Dessert") {
            @Override
            public String getItemType() { return "Dessert"; }
            @Override
            public double calculatePrice() { return getBasePrice(); }
        };
        menuItems.add(cake);

        // Initialize sample tables
        for (int i = 1; i <= 10; i++) {
            tables.add(new Table(i, 4));
        }

        // Initialize sample customers
        customers.add(new Customer(1, "Nguy·ªÖn VƒÉn A", "a@gmail.com", "0901234567"));
        customers.add(new Customer(2, "Tr·∫ßn Th·ªã B", "b@gmail.com", "0912345678"));
    }

    private MenuItem findMenuItemById(int id) {
        return menuItems.stream()
                .filter(item -> item.getId() == id)
                .findFirst()
                .orElse(null);
    }

    private Table findTableByNumber(int number) {
        return tables.stream()
                .filter(table -> table.getTableNumber() == number)
                .findFirst()
                .orElse(null);
    }

    private int getIntInput() {
        while (true) {
            try {
                return Integer.parseInt(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá: ");
            }
        }
    }

    public static void main(String[] args) {
        CustomerView customerView = new CustomerView();
        customerView.start();
    }
}
